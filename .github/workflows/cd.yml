name: Build & Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - main

# Permission added at workflow level    
permissions:
  id-token: write
  contents: read

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      ACCOUNT_NO: ${{ steps.github-vars.outputs.ACCOUNT_NO }}
      REPOSITORY: ${{ steps.github-vars.outputs.REPOSITORY }}
      TASK_DEFINITION: ${{ steps.github-vars.outputs.TASK_DEFINITION }}
      CONTAINER: ${{ steps.github-vars.outputs.CONTAINER }}
      SERVICE: ${{ steps.github-vars.outputs.SERVICE }}
      CLUSTER: ${{ steps.github-vars.outputs.CLUSTER }}
      IMAGE_TAG: ${{ steps.base-url.outputs.IMAGE_TAG }}
      ECR_REGISTRY: ${{ steps.base-url.outputs.ECR_REGISTRY }}
    steps:
      - name: Set Variable For Branch
        id: set_branch
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_ENV
          
      - name: Set Environment Variable
        id: set_environment
        run: |
          case "${{ github.event_name }}" in
            push-develop)
              echo "ENVIRONMENT=uat" >> $GITHUB_ENV
              ;;
            push-main)
              echo "ENVIRONMENT=prod" >> $GITHUB_ENV
              ;;
            workflow_dispatch)
              echo "ENVIRONMENT=dev" >> $GITHUB_ENV
              ;;
            *)
              echo "ENVIRONMENT=unknown" >> $GITHUB_ENV
              ;;
          esac  
      
      - name: Get Values Of Environment Variables
        id: givars
        run: |
          case "${{ env.ENVIRONMENT }}" in
            uat)
              echo "ACCOUNT_NO=623196793673" >> $GITHUB_ENV
              echo "REPOSITORY=kansoops-frontend" >> $GITHUB_ENV
              echo "TASK_DEFINITION=kansoops-frontend" >> $GITHUB_ENV
              echo "CONTAINER=kansoops-frontend" >> $GITHUB_ENV
              echo "SERVICE=kansoops-frontend" >> $GITHUB_ENV
              echo "CLUSTER=kansoops" >> $GITHUB_ENV
              echo "NEXT_PUBLIC_API_BASE_URL=https://pv83na4joj.execute-api.us-east-1.amazonaws.com" >> $GITHUB_ENV
              ;;
            prod)
              echo "ACCOUNT_NO=715054638640" >> $GITHUB_ENV
              echo "REPOSITORY=kansoops-frontend" >> $GITHUB_ENV
              echo "TASK_DEFINITION=kansoops-frontend" >> $GITHUB_ENV
              echo "CONTAINER=kansoops-frontend" >> $GITHUB_ENV
              echo "SERVICE=kansoops-frontend" >> $GITHUB_ENV
              echo "CLUSTER=kansoops-frontend" >> $GITHUB_ENV
              echo "NEXT_PUBLIC_API_BASE_URL=https://fie8kk0pj4.execute-api.us-east-1.amazonaws.com" >> $GITHUB_ENV
              ;;
            dev)
              echo "ACCOUNT_NO=827014984962" >> $GITHUB_ENV
              echo "REPOSITORY=kanso-ops-frontend" >> $GITHUB_ENV
              echo "TASK_DEFINITION=kanso-ops-frontend-def" >> $GITHUB_ENV
              echo "CONTAINER=frontend" >> $GITHUB_ENV
              echo "SERVICE=frontend" >> $GITHUB_ENV
              echo "CLUSTER=kanso-ops-frontend" >> $GITHUB_ENV
              echo "NEXT_PUBLIC_API_BASE_URL=https://pv83na4joj.execute-api.us-east-1.amazonaws.com" >> $GITHUB_ENV
              ;;
          esac

      - name: set values to second job
        id : github-vars
        run: |
          echo "::set-output name=ACCOUNT_NO::${{ env.ACCOUNT_NO }}"
          echo "::set-output name=REPOSITORY::${{ env.REPOSITORY }}"
          echo "::set-output name=TASK_DEFINITION::${{ env.TASK_DEFINITION }}"
          echo "::set-output name=CONTAINER::${{ env.CONTAINER }}"
          echo "::set-output name=SERVICE::${{ env.SERVICE }}"
          echo "::set-output name=CLUSTER::${{ env.CLUSTER }}"
      - name: Set BASE_URL
        id: base-url
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr '/' '-')
          COMMIT_ID=${{ github.sha }}
          IMAGE_TAG=$BRANCH_NAME-$COMMIT_ID
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> $GITHUB_ENV
          echo "::set-output name=IMAGE_TAG::${IMAGE_TAG}"
          echo "::set-output name=ECR_REGISTRY::${ECR_REGISTRY}"
          # Set Public API Base URL in .env.local file
          #echo "NEXT_PUBLIC_API_BASE_URL=${{ env.NEXT_PUBLIC_API_BASE_URL }}/${{ env.ENVIRONMENT }}" > .env.local
          
      # - name: Checkout repository
      #   uses: actions/checkout@v4.1.1

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1.7.0
      #   with:
      #     role-to-assume: arn:aws:iam::${{ env.ACCOUNT_NO }}:role/${{ vars.ROLE_NAME }}
      #     role-session-name: GitHub_to_AWS_via_FederatedOIDC
      #     aws-region: us-west-2
          
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1.7.0
      #   with:
      #     registry: ${{ env.REPOSITORY }}
      #     mask-password: true

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
            
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-publish  # Wait for the build-and-publish job to finish successfully before starting deployment
    steps:
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1.7.0
      #   with:
      #     role-to-assume: arn:aws:iam::${{ needs.build-and-publish.outputs.ACCOUNT_NO }}:role/${{ vars.ROLE_NAME }}
      #     role-session-name: GitHub_to_AWS_via_FederatedOIDC
      #     aws-region: us-west-2
          
      # - name: Download task definition
      #   run: |
      #     aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} \
      #       --query taskDefinition > task-definition.json
          
      # - name: Update new image ID in ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: task-definition.json
      #     container-name: ${{ env.CONTAINER }}
      #     image: ${{env.ECR_REGISTRY}}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
            
      # - name: Deploy Amazon ECS task definition
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      #   with:
      #     task-definition: ${{ steps.task-def.outputs.task-definition }}
      #     service: ${{ env.SERVICE }}
      #     cluster: ${{ env.CLUSTER }}
      #     wait-for-service-stability: true
      - name: Download task definition
        run: |
            echo "NO: ${{ needs.build-and-publish.outputs.ACCOUNT_NO }}"
            echo "Image: ${{ needs.build-and-publish.outputs.IMAGE_TAG }}"
