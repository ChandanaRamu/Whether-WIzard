name: CICD

on:
  push:
    branches: [master]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      ecr-registry: ${{ steps.login-ecr.outputs.registry }}
      image: ${{ steps.build-image.outputs.IMAGE}}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          REPOSITORY: kanso-ops-automations
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          # docker build -t ${{ steps.login-ecr.outputs.registry }}/$REPOSITORY:$IMAGE_TAG .
          # docker push ${{ steps.login-ecr.outputs.registry }}/$REPOSITORY:$IMAGE_TAG
          echo "IMAGE=chandana" >> $GITHUB_ENV
          echo "::set-output name=IMAGE::${IMAGE}"

  deploy :
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Configure AWS credentials for deployment
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.DEPLOY_AWS_REGION }}
      
      # Use the output from the previous job to access the ECR registry
      - name: Use ECR registry output from previous job
        run: |
          echo "ECR Registry IMAGE: ${{ needs.build-and-deploy.outputs.image }}"
